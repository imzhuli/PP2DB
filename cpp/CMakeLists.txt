cmake_minimum_required(VERSION 3.14)
project (h4x)

enable_language(CXX)

message(STATUS "CMAKE_BUILD_TYPE=" ${CMAKE_BUILD_TYPE})
message(STATUS "CMAKE_SYSTEM_NAME=" ${CMAKE_SYSTEM_NAME})
message(STATUS "CMAKE_CXX_COMPILER_ID=" ${CMAKE_CXX_COMPILER_ID})

find_package(Threads REQUIRED)
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	add_compile_options("-D_CRT_SECURE_NO_WARNINGS")
	add_compile_options("-std:c++20")
	if (CMAKE_BUILD_TYPE STREQUAL "Release")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
	endif()
	set(cpp Threads::Threads)
else()
	set(CMAKE_CXX_STANDARD 20)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS OFF)

	if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		add_compile_options("-g")
		add_compile_options("-Wall")
		add_compile_options("-Wno-attributes")
		add_compile_options("-Wno-parentheses")
		add_compile_options("-Wno-deprecated-declarations")
		add_compile_options("-Werror")
		set(cpp stdc++fs stdc++ Threads::Threads)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
		add_compile_options("-g")
		add_compile_options("-Wall")
		add_compile_options("-Wno-attributes")
		add_compile_options("-Wno-parentheses")
		add_compile_options("-Wno-deprecated-declarations")
		add_compile_options("-Werror")
		set(cpp c++fs c++ Threads::Threads)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
		add_compile_options("-g")
		add_compile_options("-Wall")
		add_compile_options("-Wno-attributes")
		add_compile_options("-Wno-parentheses")
		add_compile_options("-Wno-deprecated-declarations")
		add_compile_options("-Werror")
		set(cpp Threads::Threads)
	endif()
endif()

if (CMAKE_SYSTEM_NAME MATCHES "MSYS")
	if (CMAKE_BUILD_TYPE STREQUAL "Debug")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mconsole")
	endif()
	include_directories("/mingw64/include/")
	link_directories("/mingw64/lib/")
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	include_directories("/usr/local/include/")
	link_directories("/usr/local/lib/")
endif()

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
	if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/.local" CACHE PATH "..." FORCE)
	else()
		set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/.local" CACHE PATH "..." FORCE)
	endif()
endif()

set(LIBRARY_OUTPUT_PATH                        "${PROJECT_BINARY_DIR}/bin")
set(EXECUTABLE_OUTPUT_PATH                     "${PROJECT_BINARY_DIR}/bin")
set(CMAKE_MODULE_PATH                          ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/Modules/")

set(CMAKE_BUILD_RPATH_USE_ORIGIN               TRUE)
set(CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH     TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH          FALSE)
set(CMAKE_INSTALL_RPATH                        "\$ORIGIN")

if ("${X_LIB}" STREQUAL "")
	message( FATAL_ERROR "x_lib dependency not found" )
else()
	set(X_INCLUDE_DIRS "${X_LIB}/./_3rd_installed/include" "${X_LIB}/./_corex_installed/include")
	set(X_LIBRARY_DIRS "${X_LIB}/./_3rd_installed/lib" "${X_LIB}/./_corex_installed/lib")
	set(X_LIBRARIES     xel curl everest freetype mbedcrypto mbedtls mbedx509 p256m z)
endif()

add_subdirectory(src)